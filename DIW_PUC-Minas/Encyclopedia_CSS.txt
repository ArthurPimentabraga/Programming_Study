///Seletores
    Pseudo-Classe-> O seletor indica estados ou situações de elementos HTML. 
        Ex: p:First-of-typy{} or p:actived{} or p:hover{} ...;
    
    Pseudo-Elemento-> Seletor que indica PARTES do elemento HTML para serem manipuladas.
        Ex: p::first-letter{} (modifica a 1º letra de cada parágrafo) or p::after{} ...;

    Universal-> Modifica todos os elementos css da pág.
        Ex: *{margin:0} (todos os elementos ficam com margin 0);

///Combinações de Seletores
    p, ul{} -> todos os p e ul receberão tais manipulações;
    li.active -> todos os elementos li que tiverem a class .active receberão tais manipulações;
    div p{} -> todos os elementos p que são descendentes de uma div receberão tais manipulações;
    div>p{} -> todos os elementos p que são filhos de uma div receberão tais manipulações, ou seja,
        o p precisa ser a primeira tag dentro de div;
    li.active + li{} -> o próximo elemento li depois do li que contém a class active receberá tais 
        manipulações;
    li.active ~ li{} -> os próximos elementos li depois do li que contém a class active receberá tais 
        manipulações;

///Prioridades de Seletores
    A prioridade é dada pela ordem de leitura, a especificidade e pela caracteristica !important;
    -Na ordem prevalece a última;
    -Na especificidade, de maior para menor: comando inline - id - class - elemento HTML
        Para calcular a especificidade pode dar +1 ponto para cada surgimento deles.
        Ex: #wrapper li{} -> especificidade de 0,1,0,1 <- este é prioridade 
            li.active{} -> especificidade de 0,0,1,1
    -Se colocado o !important no modificador css, ele se torna prioridade;

------------------------------------------------------------------------------------------------------

///Position and Display

------------------------------------------------------------------------------------------------------

///Transform and Keyframes

------------------------------------------------------------------------------------------------------

///Layout Responsivo 
    +Tipos de Layout:
        -Líquido-> É contruído quase que inteiramente por %. O layout somente se ajusta à tela em que  
            está sendo exibido;
        -Fixo-> Tal layout é contruído para uma tela específica, ou seja, para uma quantidade 
            específica de pixels. E se for exibido em uma tela com uma quantidade inferior de px pode 
            resultar nas famosas barras de rolagem horizontal, conteúdo muito pequeno...;
        -Responsivo-> Contruído por % e px; Basicamente é um layout líquido, porém há inteligência, 
            ou seja, alguns elementos podem se redimencionar dependendo do tamanho da tela, podem 
            mudar de posição... todo necessário para melhor experiência em qualquer tela. (É a mais 
            cara e demorada. Imagina se esconde um anúncio... kkk);
    
    +Mobile First: Uma boa técnica é começar a construir o site para o mobile e depois adaptar para o 
        desktop. (O acesso de site pelos smartphones é predominante) Com isso cria-se vantagens, como:
        Vantagem no ranqueamento do google com a prioridade da versão mobile; Sem gambiarras para 
        adaptar para mobile; Site pensado mais para o mobile, então um melhor ux...; 
    
    +Projeto: 
        -1º Mapa Conceitual-> Criar uma teia interligando todo conteúdo à ser exibido no site;
        -2º Mapa do site-> Com o mapa conceitual, cria-se o mapa do site o qual organizará o conteúdo 
            à ser exibido, irá criar uma arquitetura de navegação;
        -3º Wireframe-> É um desenho da tela em que se deseja exibir o site, com elementos 
            representativos, ou seja, organiza o conteúdo na tela, decidindo como será exibido, como 
            se comportará...
        -4º Taskflow-> Mostra a sequência de ações possíveis de serem feitas no site, por exemplo, os 
            passos para o cadastro;

------------------------------------------------------------------------------------------------------

///Viewport and Media Queries
    +Viewport: É a área visível para o usuário de uma página web. Se não for definida a forma como ela 
        se comportará, em casos em que a tela tem uma quantidade de px diferente, como quando é 
        visualizado no celular, a viewport tenta colocar todo conteúdo dentro dela, deixando assim 
        textos muito pequenos...  
        -Definição-> <meta name="viewport" content="X,Y,Z">
            X-> Largura da viewport, definida com pixels fixos ou device-width que pega o tamanho max; 
            Y-> Define a escala inicial, ou seja, um usuário pode, já por definição do seu dispositivo,
                ter uma escala(zoom) maior ou menor, então definindo como 1, a viewport volta para a 
                escala em que foi produzida;
            Z-> Define os limites da escala(zoom) que o usuário pode dar. Não é usado pq o mesmo pode 
                ter algum problema visual e querer dar muito zoom, por exemplo; 
        <meta name="viewport" content="width=device-width", initial-scale=1">    

    +Breakpoints: São os pontos de mudança de layout usado em MediaQueries. Em outras palavras é 
        o tamanho de tela(hardware) que informamos à tag media para quando um dispositivo estiver 
        naquela resolução, usar o css adequado. Porém em dispositivos menores, o tamanho da resolução 
        da tela(resolução lógica) não é a mesma que do hardware (os Breakpoints usam a resolução 
        lógica).
        -Já existem Breakpoints prontos na web, mas tem como calcular. Basta dividir a resolução
            física (hardware) pela razão de pixel do dispositivo(encontrado na especificação do 
            mesmo). As viewport == a resolução lógica == aos Breakpoints;








